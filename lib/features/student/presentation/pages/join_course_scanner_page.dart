// lib/presentation/pages/student/join_course_scanner_page.dart

import 'dart:async'; // üëà ƒë·ªÉ d√πng FutureOr
import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';

class JoinCourseScannerPage extends StatefulWidget {
  const JoinCourseScannerPage({super.key});

  @override
  State<JoinCourseScannerPage> createState() => _JoinCourseScannerPageState();
}

class _JoinCourseScannerPageState extends State<JoinCourseScannerPage>
    with WidgetsBindingObserver {
  final MobileScannerController controller = MobileScannerController(
    autoStart: false, // Kh√¥ng t·ª± b·∫≠t camera
  );

  bool _isScanCompleted = false;
  bool _cameraOn = false; // tr·∫°ng th√°i camera
  bool _processing = false; // ch·ªëng spam detect

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    controller.dispose();
    super.dispose();
  }

  // T·∫Øt/b·∫≠t camera theo v√≤ng ƒë·ªùi app (an to√†n)
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    if (!_cameraOn) return;
    if (state == AppLifecycleState.resumed) {
      controller.start();
    } else {
      controller.stop();
    }
  }

  Future<void> _startCamera() async {
    // B1: G·ªçi setState ƒë·ªÉ Flutter b·∫Øt ƒë·∫ßu build widget MobileScanner
    if (!mounted) return;
    setState(() {
      _cameraOn = true;
    });

    // B2: ƒê·ª£i cho frame hi·ªán t·∫°i ƒë∆∞·ª£c build xong, sau ƒë√≥ m·ªõi th·ª±c thi .start()
    // ƒê√¢y l√† c√°ch l√†m an to√†n v√† ƒë·∫£m b·∫£o widget ƒë√£ ƒë∆∞·ª£c build.
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      try {
        await controller.start();
      } catch (e) {
        if (!mounted) return;
        // N·∫øu c√≥ l·ªói khi start, t·∫Øt c·ªù camera ƒëi
        setState(() => _cameraOn = false);
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Kh√¥ng b·∫≠t ƒë∆∞·ª£c camera: $e')));
      }
    });
  }

  Future<void> _stopCamera() async {
    try {
      // S·ª¨A L·ªñI: Ch·ªâ c·∫ßn ki·ªÉm tra bi·∫øn tr·∫°ng th√°i c·ªßa ch√≠nh b·∫°n
      if (_cameraOn) {
        await controller.stop();
      }
    } catch (e) {
      // Ghi log l·ªói n·∫øu c·∫ßn, nh∆∞ng kh√¥ng c·∫ßn b√°o cho ng∆∞·ªùi d√πng
      debugPrint('L·ªói khi t·∫Øt camera: $e');
    } finally {
      // D√π c√≥ l·ªói hay kh√¥ng, lu√¥n c·∫≠p nh·∫≠t UI ƒë·ªÉ ·∫©n camera ƒëi
      if (mounted) {
        setState(() {
          _cameraOn = false;
        });
      }
    }
  }

  Future<void> _toggleCamera() async {
    if (_cameraOn) {
      await _stopCamera();
    } else {
      await _startCamera();
    }
  }

  Future<void> _onDetect(BarcodeCapture capture) async {
    if (!_cameraOn || _processing || _isScanCompleted) return;

    final codes = capture.barcodes;
    final value = codes.isNotEmpty ? codes.first.rawValue : null;
    if (value == null) return;

    _processing = true;
    _isScanCompleted = true;

    try {
      await controller.stop();
      if (!mounted) return;
      Navigator.pop(context, value); // tr·∫£ m√£ v·ªÅ trang tr∆∞·ªõc
    } finally {
      _processing = false;
    }
  }

  void _showInstructions() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (ctx) => Container(
        margin: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Theme.of(ctx).colorScheme.surface,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Padding(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Center(
                child: Container(
                  width: 40,
                  height: 4,
                  decoration: BoxDecoration(
                    color: Theme.of(ctx).colorScheme.onSurfaceVariant
                        .withValues(alpha: 0.4), // üëà ƒë·ªïi from withOpacity
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Icon(
                    Icons.help_outline,
                    color: Theme.of(ctx).colorScheme.primary,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'H∆∞·ªõng d·∫´n qu√©t QR tham gia m√¥n',
                    style: Theme.of(ctx).textTheme.titleLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              const Text(
                '1) Nh·∫•n ‚ÄúB·∫≠t camera‚Äù\n'
                '2) ƒê∆∞a camera t·ªõi m√£ QR gi·∫£ng vi√™n cung c·∫•p\n'
                '3) ƒê·∫£m b·∫£o m√£ n·∫±m tr·ªçn trong khung\n'
                '4) Gi·ªØ m√°y ·ªïn ƒë·ªãnh cho t·ªõi khi c√≥ ti·∫øng ‚Äút√°ch‚Äù\n'
                '5) K·∫øt qu·∫£ s·∫Ω t·ª± ƒëi·ªÅn v·ªÅ m√†n tr∆∞·ªõc',
                style: TextStyle(height: 1.5),
              ),
              const SizedBox(height: 12),
              Align(
                alignment: Alignment.centerRight,
                child: FilledButton(
                  onPressed: () => Navigator.pop(ctx),
                  child: const Text('ƒê√£ hi·ªÉu'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        elevation: 0,
        title: const Text('Qu√©t m√£ QR tham gia m√¥n'),
      ),
      body: Stack(
        alignment: Alignment.center,
        children: [
          // Camera
          Positioned.fill(
            child: _cameraOn
                ? MobileScanner(controller: controller, onDetect: _onDetect)
                : const ColoredBox(color: Colors.black),
          ),

          // Khung & h∆∞·ªõng d·∫´n ·ªü gi·ªØa, width g·ªçn
          Center(
            child: ConstrainedBox(
              constraints: const BoxConstraints(maxWidth: 300),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    width: 260,
                    height: 260,
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: _cameraOn ? Colors.white : Colors.white24,
                        width: 2,
                      ),
                      borderRadius: BorderRadius.circular(14),
                    ),
                  ),
                  const SizedBox(height: 24),
                  Text(
                    _cameraOn
                        ? 'ƒê∆∞a m√£ QR v√†o trong khung'
                        : 'B·∫•m n√∫t "B·∫≠t camera" ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√©t QR',
                    style: TextStyle(
                      color: _cameraOn ? Colors.white : Colors.white70,
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
          ),
        ],
      ),

      // Thanh h√†nh ƒë·ªông d∆∞·ªõi
      bottomNavigationBar: SafeArea(
        child: Container(
          color: Colors.black,
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 10),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _ActionButton(
                icon: _cameraOn ? Icons.videocam_off : Icons.videocam,
                label: _cameraOn ? 'T·∫°m d·ª´ng' : 'B·∫≠t camera',
                onTap: _toggleCamera, // sync/async ƒë·ªÅu OK
              ),
              _ActionButton(
                icon: Icons.flash_on,
                label: 'ƒê√®n flash',
                // üëá n·∫øu SDK c·ªßa b·∫°n tr·∫£ v·ªÅ void, v·∫´n h·ª£p l·ªá
                onTap: _cameraOn ? controller.toggleTorch : null,
                disabled: !_cameraOn,
              ),
              _ActionButton(
                icon: Icons.cameraswitch,
                label: 'ƒê·ªïi camera',
                onTap: _cameraOn ? controller.switchCamera : null,
                disabled: !_cameraOn,
              ),
              _ActionButton(
                icon: Icons.help_outline,
                label: 'H∆∞·ªõng d·∫´n',
                onTap: _showInstructions,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// N√∫t h√†nh ƒë·ªông d∆∞·ªõi c√πng
class _ActionButton extends StatelessWidget {
  const _ActionButton({
    required this.icon,
    required this.label,
    this.onTap,
    this.disabled = false,
  });

  final IconData icon;
  final String label;

  // ‚úÖ CHO PH√âP H√ÄM sync (void) HO·∫∂C async (Future<void>)
  final FutureOr<void> Function()? onTap;
  final bool disabled;

  @override
  Widget build(BuildContext context) {
    final color = disabled ? Colors.white24 : Colors.white;

    return InkWell(
      onTap: disabled
          ? null
          : () async {
              final fn = onTap;
              if (fn != null) {
                // G·ªçi ƒë·ªìng b·ªô ho·∫∑c b·∫•t ƒë·ªìng b·ªô ƒë·ªÅu OK
                await Future.sync(fn);
              }
            },
      borderRadius: BorderRadius.circular(10),
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, color: color),
            const SizedBox(height: 6),
            Text(label, style: TextStyle(color: color, fontSize: 12)),
          ],
        ),
      ),
    );
  }
}
